# Travis CI (MIT License) configuration file for the WordPress Plugin Boilerplate
# @link https://travis-ci.org/

# For use with the WordPress Plugin Boilerplate
# @link https://github.com/seb86/WordPress-Plugin-Boilerplate

# Declare project language.
# @link http://about.travis-ci.org/docs/user/languages/php/
language: php

# Declare versions of PHP to use. Use one decimal max.
php:
    # aliased to a recent 7.0.x version
    - "7.0"
    # aliased to a recent 5.6.x version
    - "5.6"
    # aliased to a recent 5.5.x version
    - "5.5"

# Declare which versions of WordPress to test against.
# Also declare whether or not to test in Multisite.
env:
    - TRAVIS_NODE_VERSION="4"
    # Trunk
    # @link https://github.com/WordPress/WordPress
    - WP_VERSION=master WP_MULTISITE=0
    - WP_VERSION=master WP_MULTISITE=1
    # WordPress 4.7
    # @link https://github.com/WordPress/WordPress/tree/4.7-branch
    - WP_VERSION=4.7 WP_MULTISITE=0
    - WP_VERSION=4.7 WP_MULTISITE=1
    # WordPress 4.6
    # @link https://github.com/WordPress/WordPress/tree/4.6-branch
    - WP_VERSION=4.6 WP_MULTISITE=0
    - WP_VERSION=4.6 WP_MULTISITE=1
    # WordPress 4.5
    # @link https://github.com/WordPress/WordPress/tree/4.5-branch
    - WP_VERSION=4.5 WP_MULTISITE=0
    - WP_VERSION=4.5 WP_MULTISITE=1
    # WordPress 4.4
    # @link https://github.com/WordPress/WordPress/tree/4.4-branch
    - WP_VERSION=4.4 WP_MULTISITE=0
    - WP_VERSION=4.4 WP_MULTISITE=1

# Declare 7 beta in test matrix.
# @link http://docs.travis-ci.com/user/build-configuration/
matrix:
    include:
        - php: 5.6
          env: WP_VERSION=master
    allow_failures:
        - php: 7
          env: WP_VERSION=master

# Use this to prepare the system to install prerequisites or dependencies.
# e.g. sudo apt-get update.
# Failures in this section will result in build status 'errored'.
# before_install:

# Use this to prepare your build for testing.
# e.g. copy database configurations, environment variables, etc.
# Failures in this section will result in build status 'errored'.
before_script:
    - npm install
    - npm install -g grunt-cli
    - composer self-update
    - composer install
    - bash bin/install-wp-tests.sh wordpress_test root '' localhost $WP_VERSION

script: 
    phpunit

# Run test script commands.
# Default is specific to project language.
# All commands must exit with code 0 on success. Anything else is considered failure.
#script:
    # Search for PHP syntax errors.
    ##- find . \( -name '*.php' \) -exec php -lf {} \;
    # WordPress Coding Standards
    # @link https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards
    # @link http://pear.php.net/package/PHP_CodeSniffer/
    # -p flag: Show progress of the run.
    # -s flag: Show sniff codes in all reports.
    # -v flag: Print verbose output.
    # -n flag: Do not print warnings (shortcut for --warning-severity=0)
    # --standard: Use WordPress as the standard.
    # --extensions: Only sniff PHP files.
    ##- $WP_DEVELOP_DIR/php-codesniffer/scripts/phpcs -p -s -v -n . --standard=./codesniffer.ruleset.xml --extensions=php

after_script:
    - php vendor/bin/coveralls --config tests/.coveralls.yml -v --exclude-no-stmt

# Receive notifications for build results.
# @link http://docs.travis-ci.com/user/notifications/#Email-notifications
notifications:
    email: false